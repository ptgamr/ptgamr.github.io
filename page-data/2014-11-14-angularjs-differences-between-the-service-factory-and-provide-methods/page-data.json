{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014-11-14-angularjs-differences-between-the-service-factory-and-provide-methods/","result":{"data":{"site":{"siteMetadata":{"title":"Anh Trinh's blog"}},"markdownRemark":{"id":"c7bd45a8-c001-5007-afbe-8fe483c03fe6","excerpt":"In Angular, services are singleton objects that are created when necessary and are never cleaned up until the end of the application life-cycle (when the…","html":"<p>In Angular, services are singleton objects that are created when necessary and are never cleaned up until the end of the application life-cycle (when the browser is closed). Controllers are destroyed and cleaned up when they are no longer needed.</p>\n<p>This is why we can’t dependably use controllers to share data across our application, especially when using routing</p>\n<blockquote>\n<p>Services are designed to be the glue between controllers, the minions of data, the slaves of functionality, the worker-bees of our application.</p>\n</blockquote>\n<h3>3 ways to creat a service in AngularJS</h3>\n<h3>factory()</h3>\n<p>The <code class=\"language-text\">factory()</code> method allows us to define a service by returning an object that contains service functions and service data. The service definition function is where we place our injectable services, such as $http and $q. </p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">  angular.module(&#39;myApp.services&#39;)\n  \t.factory(&#39;User&#39;, function($http) { // injectables go here\n        var backendUrl = &quot;http://localhost:3000&quot;;\n        var service = {\n          // our factory definition\n          user: {},\n          setName: function(newName) { \n          service.user[&#39;name&#39;] = newName; \n          },\n       \t  setEmail: function(newEmail) {\n            service.user[&#39;email&#39;] = newEmail;\n          },\n          save: function() {\n            return $http.post(backendUrl + &#39;/users&#39;, {\n            \tuser: service.user\n          \t});\n          }\n        };\n        return service;\n});</code></pre></div>\n<h4>Using the factory() in our app</h4>\n<p>It’s easy to use the factory in our application as we can simply inject it where we need it at run-time </p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">    angular.module(&#39;myApp&#39;)\n    .controller(&#39;MainCtrl&#39;, function($scope, User) {\n      $scope.saveUser = User.save;\n    });</code></pre></div>\n<h4>When to use the factory() method</h4>\n<p>The <code class=\"language-text\">factory()</code> method is a great choice to use to build a factory when we just need a collection of methods and data and don’t need to do anything especially complex with our service.</p>\n<p>We cannot use the <code class=\"language-text\">factory()</code> method when we need to configure our service from the <code class=\"language-text\">.config()</code> function.</p>\n<h3>service()</h3>\n<p>The <code class=\"language-text\">service()</code> method, on the other hand allows us to create a service by defining a constructor function. We can use a prototypical object to define our service, instead of a raw javascript object. </p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">\tangular.module(&#39;myApp.services&#39;)\n    .service(&#39;User&#39;, function($http) { // injectables go here\n      var self = this; // Save reference\n      this.user = {};\n      this.backendUrl = &quot;http://localhost:3000&quot;;\n      this.setName = function(newName) {\n        self.user[&#39;name&#39;] = newName;\n      }\n      this.setEmail = function(newEmail) {\n        self.user[&#39;email&#39;] = newEmail;\n      }\n      this.save = function() {\n        return $http.post(self.backendUrl + &#39;/users&#39;, {\n          user: self.user\n        })\n      }\n    });</code></pre></div>\n<h4>Using the factory() in our app</h4>\n<p>It’s easy to use the factory in our application as we can simply inject it where we need it at run-time </p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">    angular.module(&#39;myApp&#39;)\n    .controller(&#39;MainCtrl&#39;, function($scope, User) {\n      $scope.saveUser = User.save;\n    }); </code></pre></div>\n<h4>When to use the service() method</h4>\n<p>The <code class=\"language-text\">service()</code> method is great for creating services where we need a bit more control over the functionality required by our service. It’s also mostly guided by preference to use this instead of referring to the service</p>\n<p>We cannot use the <code class=\"language-text\">service()</code> method when we need to configure our service from the <code class=\"language-text\">.config()</code> function.</p>\n<h3>provide()</h3>\n<p>The lowest level way to create a service is by using the provide() method. This is the only way to create a service that we can configure using the .config() function.</p>\n<p>Unlike the previous to methods, we’ll set the injectables in a defined this.$get() function definition. </p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">    angular.module(&#39;myApp.services&#39;)\n    .provider(&#39;User&#39;, function() {\n      this.backendUrl = &quot;http://localhost:3000&quot;;\n      this.setBackendUrl = function(newUrl) {\n        if (url) this.backendUrl = newUrl;\n      }\n      this.$get = function($http) { // injectables go here\n        var self = this;\n        var service = {\n          user: {},\n          setName: function(newName) {\n            service.user[&#39;name&#39;] = newName;\n          },\n          setEmail: function(newEmail) {\n            service.user[&#39;email&#39;] = newEmail;\n          },\n          save: function() {\n            return $http.post(self.backendUrl + &#39;/users&#39;, {\n              user: service.user\n            })\n          }\n        };\n        return service;\n      }\n    });</code></pre></div>\n<h4>Using the provider() in our app</h4>\n<p>In order to configure our service, we can inject the provider into our <code class=\"language-text\">.config()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">    angular.module(&#39;myApp&#39;)\n    .config(function(UserProvider) {\n    UserProvider.setBackendUrl(&quot;http://myApiBackend.com/api&quot;);\n    })</code></pre></div>\n<p>We can use the service in our app just like any other service now </p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">    angular.module(&#39;myApp&#39;)\n    .controller(&#39;MainCtrl&#39;, function($scope, User) {\n      $scope.saveUser = User.save;\n    });</code></pre></div>\n<h4>When to use the <code class=\"language-text\">provider()</code> method</h4>\n<p>The <code class=\"language-text\">provider()</code> method is required when we want to configure our service before the app runs. For instance, if we need to configure our services to use a different back-end based upon different deployment environments (development, staging, and production).</p>\n<p>It’s the preferred method for writing services that we intend on distributing open-source as well as it allows us to configure services without needing to hard-code configuration data.</p>\n<p>Source: <a href=\"http://www.ng-newsletter.com/advent2013/#!/day/1\">ng-newsletter</a></p>","frontmatter":{"title":"AngularJS - Differences between the service(), factory(), and provide() methods","date":"November 13, 2014","description":null}}},"pageContext":{"slug":"/2014-11-14-angularjs-differences-between-the-service-factory-and-provide-methods/","previous":{"fields":{"slug":"/2014-09-24-cordova-plugin-for-google-play-game-service/"},"frontmatter":{"title":"Cordova plugin for Google Play Game Service"}},"next":{"fields":{"slug":"/2014-11-26-my-favourite-modules-pattern-jquery-plugin-boilerplates/"},"frontmatter":{"title":"My favourite Modules Pattern & JQuery Plugin boilerplates"}}}},"staticQueryHashes":["2841359383","916993862"]}