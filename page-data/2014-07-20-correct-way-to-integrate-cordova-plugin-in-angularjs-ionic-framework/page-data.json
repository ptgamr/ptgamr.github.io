{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014-07-20-correct-way-to-integrate-cordova-plugin-in-angularjs-ionic-framework/","result":{"data":{"site":{"siteMetadata":{"title":"Anh Trinh's blog"}},"markdownRemark":{"id":"886ae6f3-4dbe-515d-b5a7-4293f37ad12b","excerpt":"If you are using Ionic Framework to develop your mobile app, even if it’s the simplest app, you need at least some cordova plugin to get your app work nicely…","html":"<p>If you are using Ionic Framework to develop your mobile app, even if it’s the simplest app, you need at least some cordova plugin to get your app work nicely.</p>\n<p>The first and most important is the <a href=\"https://github.com/apache/cordova-plugin-device\">Device Plugin</a>, which will inform your Javascript application when the Device is ready. This is luckily, already handle by Ionic Framework itself, in your app.js file, just inject <strong>$ionicPlatform</strong> to your controller. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascript\"><pre class=\"language-language-javascript\"><code class=\"language-language-javascript\">\tapp.run(function($ionicPlatform) {\n        $ionicPlatform.ready(function() {\n\n            console.log(&#39;### APP READY!!!&#39;);\n\n            setTimeout(function() {\n                navigator.splashscreen.hide();\n            }, 100);\n\n            if(window.StatusBar) {\n                StatusBar.styleDefault();\n            }\n            \n            //other logic here\n            ...\n        });\n    })</code></pre></div>\n<p>A very convinient way to integrate Cordova to your app is to make use of <a href=\"http://ngcordova.com/\">ngCordova Project</a>. It’s a set of already made AngularJS Services which are wrappers for some popular Cordova Plugins like: <strong>$cordovaCamera</strong>, <strong>$cordovaContacts</strong>, <strong>$cordovaSocialSharing</strong> … Just include the library, and inject the above service whenever you need it.</p>\n<p>However, when your app require the integration of some plugins that has not been under the protect of ngCordova, you certainly have to write your own wrapper!</p>\n<p>And here is the way i’m using to write it (I learned it from the way ngCordova did):\n</p>\n<div class=\"gatsby-highlight\" data-language=\"language-javascriptangular.module('cordovawrapper.screenshot', [])\"><pre class=\"language-language-javascriptangular.module('cordovawrapper.screenshot', [])\"><code class=\"language-language-javascriptangular.module('cordovawrapper.screenshot', [])\">\t.factory(&#39;$cordovaScreenshot&#39;, [&#39;$q&#39;, function ($q) {\n\n        return {\n\n            capture: function() {\n\n                   var q = $q.defer();     \t\n                   \tnavigator.screenshot.save(function(error,res){\n                    if(error){\n                        console.error(error);\n                        q.reject(error);\n                    }else{\n                        console.log(&#39;screenshot capture ok: &#39;,res.filePath);\n                        q.resolve(res.filePath);\n                    }\n                },&#39;jpg&#39;,50);\n\n                return q.promise;\n\n            }\n        };\n\n    }]);</code></pre></div>","frontmatter":{"title":"Correct way to integrate Cordova Plugin in AngularJS, Ionic Framework","date":"July 19, 2014","description":null}}},"pageContext":{"slug":"/2014-07-20-correct-way-to-integrate-cordova-plugin-in-angularjs-ionic-framework/","previous":{"fields":{"slug":"/2014-07-17-about/"},"frontmatter":{"title":"About me"}},"next":{"fields":{"slug":"/2014-07-23-angulars-dependency-injection-annotation-process/"},"frontmatter":{"title":"Angular’s dependency injection annotation process"}}}},"staticQueryHashes":["2841359383","916993862"]}